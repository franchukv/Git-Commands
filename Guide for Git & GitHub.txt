Гид по Git & GitHub (Spaces 4)

git config --global user.name "Vladymyr Franchuk"
git config --global user.email franchuk.vldr@gmail.com

git config --list					(Все настройки GIT)

ls -Force (PowerShell)
или      							(Отображение скрытых папок и файлов) 
ls -la (Git Bash)

pwd 								(Полный путь к какой-либо папке)
cd .. 								(Переход в родительскую папку)
cd ~/название-папки  				(Переход в папку)
mkdir название-папки 				(Создание папки)
ls 									(Список файлов в папке)
ls -la								(Список всех файлов, и скрытых тоже, в папке)
echo "Some text" > file.txt 		(Содать файл с текстом "Some text")
cat file.txt 						(Прочесть содержимое файла)
git rm file.txt или rm file.txt 	(Удалить файл)
git mv old_name.file new_name.file  (Переименование файла)


git init 							(Создание репозитория в определенной папке)
git branch 							(Название ветки)
git branch -m name-branch 			(Переименование ветки) 
git status 							(Посмотреть текущее состояние Git репозитория)
git add название-файла				(Подготовить изменения перед коммитом)
git add .							(Подготовить все изменения во всех файлах перед коммитом)
git add -p 							(Перед подготовкой просмотреть изменения в файлах)
git diff --staged 					(Просмотреть фактические изменения перед коммитом)
git commit							(Создание коммита текущей версии)
git commit -m "сообщение"			(Создание коммита с записью изменений в репозиторий)
git commit --amend                  (Перезаписать предыдущий коммит, рекомендуется использовать только в локальном репозитории)

git revert HEAD                     (Откат к предыдущему коммиту) 
git revert HASH-ID                  (Откат к любому из прошлых коммитов по хэшу коммита)

git checkout HASH-ID			    (Перейти к определенной версии, содержимое рабочей директории перезаписывается)
git checkout name-branch  		    (Перейти к определенной версии проекта по названию ветки)
git checkout name.file 				(Перейти к последней версии файла, только перед его коммитом)
git log 							(Просмотр истории изменений (коммитов) до текущей версии)
git log -p 							(Просмотр изменений сожержимого файлов в коммитах)
git log --stat 						(Статические данные коммитов, сколько файлов было измененно, удаленно или добавлено и т.д.)
git log --graph --oneline           (--graph - коммит как график, --oneline - одна строка на каждый коммит)
git show HASH-ID 				    (Посмотреть изменения в конкретном коммите)
git reset name.file                 (После добавление на ожидание коммита, можно удалить (неотслеживать) его из Stage Area)
	
git cat-file -t 					(Посмотреть тип обьекта)
git cat-file -p 					(Посмотреть содержимое обьекта)

git branch name-branch 			    (Создание новой ветки)
git checkout -b name-branch  	    (Создать новую ветку и перейти в неё)
git branch 							(Посмотреть все ветки)
git branch -m new-name-branch       (Переименовать текущую ветку)
git branch -d name-branch  		    (Удалить ветку, текущую ветку удалить нельзя)

git merge second-branch 		    (Текущая ветка (первая) принимает ветку "ветка-вторая")
git merge --abort                   (Остановить слияние веток и сбросить файлы до последнего коммита перед слиянием)

code . 								(Открыть рабочую директорию в Visual Studio)

git push 						    (Загрузить обновления с локального репозитория на удалённый)
git pull 						    (Загрузить обновления с удаленного репозитория на локальный)
git fetch 						    (Загрузить новые обьекты, но не применяет изменения локально)
git clone <url> 					(Клонирование удаленного репозитория в локальный)

git branch -a 						(Отображает все ветки, включате, которые находятся в удаленных репозиториях)

git remote add origin <url>       	(Подключение удаленного репозитория)

git push -u origin name-branch 	    (Загрузка изменений из локальной ветки в удаленную с создание связи между ними)


diff old_file.file new_file.file 						(Различия между кодом в файлах)
diff -u old_file.file new_file.file 					(Различия между кодом в файлах в унифицированном виде и большим контекстом)
wdiff old_file.file new_file.file 						(Слова которые были изменены)

diff -u old_file.file new_file.file > changes.diff 	    (Создать файл "changes.diff" с измененным кодом и контекстом) 

patch old_file.file < changes.diff    				    (Принимает файл (.diff) с изменениями и применяет изменения к исходному файлу)